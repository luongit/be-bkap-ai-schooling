package com.bkap.aispark.controller;

import com.bkap.aispark.helper.LatexNormalizer;
import com.bkap.aispark.repository.ForbiddenKeywordRepository;
import com.bkap.aispark.security.JwtUtil;
import com.bkap.aispark.service.AiChatService;
import com.bkap.aispark.service.ConversationLogService;
import com.bkap.aispark.service.CreditService;
import com.bkap.aispark.service.DefaultReplyService;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.theokanning.openai.service.OpenAiService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse; // <‚Äî th√™m import n√†y
import java.util.*;
import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/api")
public class AiStreamController {

	@Autowired
	private OpenAiService openAiService;

	private static final MediaType NDJSON = MediaType.valueOf("application/x-ndjson");
	private final ObjectMapper objectMapper = new ObjectMapper();

	@Autowired
	private ConversationLogService conversationLogService;

	@Autowired
	private JwtUtil jwtutil;

	@Autowired
	private AiChatService aiChatService;

	@Autowired
	private CreditService creditService;

	/**
	 * Body nh·∫≠n: { "messages": [{ "role":"user"|"assistant"|"system",
	 * "content":"..." }, ...], "audience": "student|teacher|kid|general" (optional)
	 * }
	 */
	@SuppressWarnings("unchecked")
	@PostMapping(path = "/stream", produces = "application/x-ndjson")
	public ResponseBodyEmitter stream(@RequestBody Map<String, Object> body, HttpServletRequest httpRequest,
			HttpServletResponse resp) {
		resp.setHeader("Content-Type", "application/x-ndjson; charset=utf-8");
		resp.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
		resp.setHeader("X-Accel-Buffering", "no");

		ResponseBodyEmitter emitter = new ResponseBodyEmitter(0L);

		CompletableFuture.runAsync(() -> {
			final StringBuilder fullResponse = new StringBuilder();
			try {
				// 1Ô∏è‚É£ L·∫•y userId
				String authHeader = httpRequest.getHeader("Authorization");
				if (authHeader == null || !authHeader.startsWith("Bearer "))
					throw new RuntimeException("Missing Authorization header");
				Long userId = jwtutil.getUserId(authHeader.substring(7));

				// 2Ô∏è‚É£ L·∫•y input message
				List<Map<String, String>> messagesData = (List<Map<String, String>>) body.get("messages");
				String userMessage = messagesData != null && !messagesData.isEmpty()
						? messagesData.get(messagesData.size() - 1).get("content")
						: "";

				// 3Ô∏è‚É£ Chu·∫©n b·ªã prompt
				List<ChatMessage> messages = new ArrayList<>();
				messages.add(new ChatMessage("system", buildSystemPrompt("student")));
				for (Map<String, String> m : messagesData) {
					messages.add(new ChatMessage(m.get("role"), m.get("content")));
				}

				// 4Ô∏è‚É£ G·ªçi API OpenAI
				ChatCompletionRequest request = ChatCompletionRequest.builder()
						.model("gpt-4o")
						.messages(messages)
						.temperature(0.2)
						.stream(false) // ‚ùó chuy·ªÉn sang non-stream ƒë·ªÉ l·∫•y usage
						.build();

				var result = openAiService.createChatCompletion(request);
				var choice = result.getChoices().get(0);
				String reply = choice.getMessage().getContent();
				fullResponse.append(reply);
				System.out.println("üî¢ Prompt tokens: " + result.getUsage().getPromptTokens());
				System.out.println("üî¢ Completion tokens: " + result.getUsage().getCompletionTokens());
				System.out.println("üî¢ Total tokens: " + result.getUsage().getTotalTokens());

				// 5Ô∏è‚É£ L·∫•y usage
				int totalTokens = Optional.ofNullable(result.getUsage())
						.map(u -> u.getCompletionTokens())
						.map(Long::intValue)
						.orElse(0);

				// ‚úÖ 6Ô∏è‚É£ L·∫•y actionCode t·ª´ FE, m·∫∑c ƒë·ªãnh l√† CHAT_AI
				String actionCode = (String) body.getOrDefault("actionCode", "CHAT_AI");

				// ‚úÖ Tr·ª´ credit theo lo·∫°i h√†nh ƒë·ªông
				boolean ok = creditService.deductByTokenUsage(userId, actionCode, totalTokens,
						"session-" + body.get("session_id"));
				if (!ok) {
					Map<String, String> error = Map.of("type", "error",
							"message", "Kh√¥ng ƒë·ªß credit ƒë·ªÉ chat v·ªõi AI!");
					emitter.send(objectMapper.writeValueAsString(error) + "\n", NDJSON);
					emitter.complete();
					return;
				}

				// 7Ô∏è‚É£ G·ª≠i v·ªÅ FE
				emitter.send(objectMapper.writeValueAsString(Map.of(
						"type", "chunk",
						"role", "assistant",
						"content", reply)) + "\n", NDJSON);

				emitter.send(objectMapper.writeValueAsString(Map.of(
						"type", "done",
						"remainingCredit", creditService.getRemainingCredit(userId))) + "\n", NDJSON);

				// 8Ô∏è‚É£ L∆∞u log
				UUID sessionId = UUID.fromString(body.get("session_id").toString());
				conversationLogService.saveLog(userId, userMessage, reply, false, sessionId);

				emitter.complete();

			} catch (Exception e) {
				try {
					emitter.send(
							objectMapper.writeValueAsString(Map.of("type", "error", "message", e.getMessage())) + "\n",
							NDJSON);
				} catch (Exception ignored) {
				}
				emitter.completeWithError(e);
			}
		});

		return emitter;
	}

	// Prompt h·ªá th·ªëng
	private String buildSystemPrompt(String audience) {
		String tone;
		switch (audience) {
			case "kid":
				tone = "Gi·∫£i th√≠ch th·∫≠t d·ªÖ hi·ªÉu, v√≠ d·ª• g·∫ßn g≈©i, c√¢u ng·∫Øn, d√πng emoji ti·∫øt ch·∫ø üë¶üëß.";
				break;
			case "student":
				tone = "Ng·∫Øn g·ªçn, ƒëi th·∫≥ng √Ω, c√≥ v√≠ d·ª• v√† b√†i t·∫≠p nh·ªè.";
				break;
			case "teacher":
				tone = "Chu·∫©n x√°c, c√≥ ƒë·ªãnh nghƒ©a, t√≠nh ch·∫•t, v√≠ d·ª• m·∫´u v√† g·ª£i √Ω ch·∫•m ƒëi·ªÉm.";
				break;
			default:
				tone = "Th√¢n thi·ªán, r√µ r√†ng, c√≥ v√≠ d·ª• minh ho·∫°.";
				break;
		}

		return String.join("\n", "B·∫°n l√† tr·ª£ l√Ω h·ªçc t·∫≠p ti·∫øng Vi·ªát ph·ª•c v·ª• h·ªçc sinh, sinh vi√™n, tr·∫ª nh·ªè v√† gi√°o vi√™n.",
				"Y√äU C·∫¶U ƒê·ªäNH D·∫†NG v√† CHU·∫®N HO√Å XU·∫§T RA:", "- D√πng Markdown. Kh√¥ng d√πng HTML th√¥.",
				"- C√¥ng th·ª©c to√°n h·ªçc: inline d√πng $...$, block d√πng $$...$$. Kh√¥ng d√πng \\( ... \\) ho·∫∑c \\[ ... \\].",
				"- V·ªõi block math, ƒë·∫∑t c√¥ng th·ª©c tr√™n d√≤ng ri√™ng gi·ªØa hai d·∫•u $$.",
				"- Kh√¥ng b·ªçc c√¥ng th·ª©c trong code fence ```...```.",
				"- Khi c·∫ßn li·ªát k√™, d√πng danh s√°ch Markdown ho·∫∑c b·∫£ng Markdown.",
				"- N·∫øu vi·∫øt k√Ω hi·ªáu nh∆∞ pi, d√πng \\pi; ph√¢n s·ªë d√πng \\frac{...}{...}; t√≠ch d√πng \\times; chia d√πng \\div.",
				"- Khi n√™u c√¥ng th·ª©c k√®m ƒëi·ªÅu ki·ªán (v√≠ d·ª• b ‚â† 0) d√πng inline math: $(b \\ne 0)$.", "",
				"PHONG C√ÅCH TR√åNH B√ÄY:", tone,
				"- Khi tr·∫£ l·ªùi theo ch∆∞∆°ng tr√¨nh B·ªô GD&ƒêT Vi·ªát Nam, d√πng thu·∫≠t ng·ªØ chu·∫©n, v√≠ d·ª•: 'Trung b√¨nh c·ªông', 'BCNN', '∆ØCLN', ...",
				"- ∆Øu ti√™n t√≠nh ch√≠nh x√°c, ng·∫Øn g·ªçn. Khi c·∫ßn, th√™m v√≠ d·ª• minh ho·∫° ng·∫Øn.",
				"- Lu√¥n g·ª£i √Ω 3 - 5 c·∫•u h·ªèi ho·∫∑c ƒë·ªÅ xu·∫•t ƒë·ªãnh h∆∞·ªõng g·ª£i √Ω ph√π h·ª£p v·ªõi n·ªôi dung m√† ng∆∞·ªùi d√πng ƒëang h·ªèi",
				"");
	}

	// T∆∞∆°ng th√≠ch nhi·ªÅu phi√™n b·∫£n theokanning
	private String extractChoiceContent(Object choice) {
		if (choice == null)
			return null;
		try {
			var getDelta = choice.getClass().getMethod("getDelta");
			Object delta = getDelta.invoke(choice);
			if (delta != null) {
				var getContent = delta.getClass().getMethod("getContent");
				Object c = getContent.invoke(delta);
				if (c != null)
					return c.toString();
			}
		} catch (NoSuchMethodException ignore) {
		} catch (Exception ignore) {
		}

		try {
			var getMessage = choice.getClass().getMethod("getMessage");
			Object msg = getMessage.invoke(choice);
			if (msg != null) {
				var getContent = msg.getClass().getMethod("getContent");
				Object c = getContent.invoke(msg);
				if (c != null)
					return c.toString();
			}
		} catch (Exception ignore) {
		}

		try {
			var getText = choice.getClass().getMethod("getText");
			Object t = getText.invoke(choice);
			if (t != null)
				return t.toString();
		} catch (Exception ignore) {
		}

		return null;
	}
}
