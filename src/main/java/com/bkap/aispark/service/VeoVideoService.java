package com.bkap.aispark.service;

import okhttp3.*;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

@Service
public class VeoVideoService {

    @Value("${veo.api.generate.url}")
    private String generateUrl;

    @Value("${veo.api.status.url}")
    private String statusUrl;

    @Value("${veo.api.model.id}")
    private String modelId;

    private final List<String> apiKeys;
    private final AtomicInteger keyIndex = new AtomicInteger(0);
    private final OkHttpClient client;

    // --- C·∫•u h√¨nh Polling ---
    private static final int MAX_POLLING_ATTEMPTS = 60;
    private static final long POLLING_INTERVAL_MS = 5000; // 5 gi√¢y
    private static final MediaType JSON_TYPE = MediaType.parse("application/json");

    public VeoVideoService(@Value("${veo.api.keys}") String apiKeysStr) {
        this.apiKeys = Arrays.asList(apiKeysStr.split(","));
        // C·∫•u h√¨nh client v·ªõi timeout d√†i cho t√°c v·ª• n·∫∑ng
        this.client = new OkHttpClient.Builder()
                .connectTimeout(30, TimeUnit.SECONDS)
                .readTimeout(180, TimeUnit.SECONDS) // TƒÉng timeout cho qu√° tr√¨nh ch·ªù d√†i
                .writeTimeout(180, TimeUnit.SECONDS)
                .build();
        System.out.println("üîë Loaded " + apiKeys.size() + " Veo keys for rotation.");
    }

    private String getNextKey() {
        int index = keyIndex.getAndUpdate(i -> (i + 1) % apiKeys.size());
        return apiKeys.get(index).trim();
    }

    private String getCurrentKey() {
        return apiKeys.get(keyIndex.get() % apiKeys.size()).trim();
    }

    /**
     * H√†m ch√≠nh: G·ª≠i y√™u c·∫ßu sinh video, ch·ªù Job ho√†n th√†nh, v√† tr·∫£ v·ªÅ URL.
     */
    public String generateVideo(String prompt) {
        if (apiKeys.isEmpty()) {
            throw new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y API Key n√†o trong c·∫•u h√¨nh!");
        }
        
        for (int i = 0; i < apiKeys.size(); i++) {
            String currentKey = getCurrentKey();
            try {
                String taskId = startVideoJob(prompt, currentKey);
                System.out.println("‚è≥ Task ID: " + taskId + " started with key: " + currentKey);
                String videoUrl = pollForResult(taskId, currentKey);
                System.out.println("‚úÖ Video generated with key: " + currentKey);
                return videoUrl;
            } catch (RuntimeException e) {
                // X·ª≠ l√Ω l·ªói do Key ho·∫∑c Job th·∫•t b·∫°i
                System.err.println("‚ùå Key failed or job error with key: " + currentKey + " ‚Üí " + e.getMessage());
                getNextKey();
            } catch (Exception e) {
                // X·ª≠ l√Ω c√°c l·ªói I/O, Polling Timeout, v.v.
                System.err.println("‚ùå Unhandled error with key: " + currentKey + " ‚Üí " + e.getMessage());
                getNextKey();
            }
        }
        throw new RuntimeException("‚ùå All keys failed or quota exceeded.");
    }

    /**
     * B·∫Øt ƒë·∫ßu Job sinh video v√† tr·∫£ v·ªÅ Task ID.
     */
    private String startVideoJob(String prompt, String apiKey) throws IOException {
        JSONObject options = new JSONObject();
        // C·∫¨P NH·∫¨T: ƒê·∫∑t ƒë·ªô ph√¢n gi·∫£i l√† 720p (m·ª©c t·ªëi thi·ªÉu API ch·∫•p nh·∫≠n) ƒë·ªÉ s·ª≠a l·ªói 400
        options.put("aspectRatio", "16:9");
        options.put("resolution", "720p");

        JSONObject json = new JSONObject();
        json.put("model", modelId); 
        json.put("prompt", prompt);
        json.put("audio", false); 
        // TH√äM TH·ªúI GIAN VIDEO (M·∫∂C ƒê·ªäNH L√Ä 5 GI√ÇY)
        json.put("duration", 3); 
        json.put("options", options);

        // FIX L·ªñI: ƒê·ªïi th·ª© t·ª± tham s·ªë th√†nh create(MediaType, String)
        RequestBody body = RequestBody.create(JSON_TYPE, json.toString());

        Request request = new Request.Builder()
                .url(generateUrl)
                .addHeader("Authorization", "Bearer " + apiKey)
                .addHeader("Content-Type", "application/json")
                .post(body)
                .build();

        try (Response response = client.newCall(request).execute()) {
            String responseBody = response.body() != null ? response.body().string() : "Empty response body";

            if (!response.isSuccessful()) {
                int code = response.code();
                // B·ªï sung ki·ªÉm tra l·ªói 400 cho tr∆∞·ªùng h·ª£p request body sai ƒë·ªãnh d·∫°ng
                if (code == 400 || code == 401 || code == 403 || code == 429 || responseBody.contains("Insufficient credits")) {
                    throw new RuntimeException("Key error, Bad Request or quota exceeded. Code: " + code + ". Body: " + responseBody);
                }
                throw new IOException("API error (" + code + "): " + responseBody);
            }

            JSONObject responseJson = new JSONObject(responseBody);
            
            // FIX L·ªñI: API tr·∫£ v·ªÅ "taskId" (camelCase) ch·ª© kh√¥ng ph·∫£i "task_id" (snake_case)
            if (!responseJson.has("taskId")) { 
                throw new RuntimeException("Ph·∫£n h·ªìi th√†nh c√¥ng nh∆∞ng thi·∫øu 'taskId'. Body: " + responseBody);
            }
            return responseJson.getString("taskId"); // S·ª≠a key th√†nh "taskId"
        }
    }

    /**
     * Polling (ki·ªÉm tra) tr·∫°ng th√°i Job cho ƒë·∫øn khi c√≥ URL video.
     */
    /**
     * Polling (ki·ªÉm tra) tr·∫°ng th√°i Job cho ƒë·∫øn khi c√≥ URL video.
     */
    private String pollForResult(String taskId, String apiKey) throws InterruptedException, IOException {
        long interval = POLLING_INTERVAL_MS;

        for (int attempt = 0; attempt < MAX_POLLING_ATTEMPTS; attempt++) {
            Thread.sleep(interval);

            // FIX L·ªñI 404: N·ªëi Task ID v√†o ƒë∆∞·ªùng d·∫´n thay v√¨ d√πng Query Parameter.
            // V√≠ d·ª•: statusUrl/veo_1760496358138_c2tvaa
            String url = statusUrl.endsWith("/") ? statusUrl + taskId : statusUrl + "/" + taskId;

            Request request = new Request.Builder()
                    .url(url)
                    .addHeader("Authorization", "Bearer " + apiKey)
                    .get()
                    .build();

            try (Response response = client.newCall(request).execute()) {
                // ƒê·ªåC BODY CH·ªà M·ªòT L·∫¶N
                String responseBody = response.body() != null ? response.body().string() : "Empty response body";
                
                if (!response.isSuccessful()) {
                    System.err.println("‚ö†Ô∏è Polling error (" + response.code() + "). Retrying... Body: " + responseBody);
                    // C√≥ th·ªÉ th√™m logic ki·ªÉm tra l·ªói 401/403 ·ªü ƒë√¢y ƒë·ªÉ ƒë·ªïi key ngay l·∫≠p t·ª©c n·∫øu c·∫ßn
                    continue; // Ti·∫øp t·ª•c v√≤ng l·∫∑p Polling
                }

                JSONObject json = new JSONObject(responseBody);
                String status = json.optString("status", "unknown");

                System.out.println("üîÑ Polling task " + taskId + ": " + status + " (" + (attempt + 1) + "/" + MAX_POLLING_ATTEMPTS + ")");

                if ("completed".equalsIgnoreCase(status)) {
                    // S·ª¨A L·ªñI: L·∫•y "videoUrl" t·ª´ b√™n trong ƒë·ªëi t∆∞·ª£ng "result"
                    if (json.has("result")) {
                        JSONObject resultJson = json.getJSONObject("result");
                        if (resultJson.has("videoUrl")) { 
                            System.out.println("üéâ Job completed. Video URL found.");
                            return resultJson.getString("videoUrl");
                        }
                    }
                    // N√©m RuntimeException n·∫øu c·∫•u tr√∫c JSON kh√¥ng ƒë√∫ng
                    throw new RuntimeException("Job ho√†n th√†nh nh∆∞ng thi·∫øu 'result.videoUrl'. Body: " + responseBody);
                }

                if ("failed".equalsIgnoreCase(status) || "error".equalsIgnoreCase(status)) {
                    // N√©m RuntimeException ƒë·ªÉ k·∫øt th√∫c polling v√† k√≠ch ho·∫°t key rotation (n·∫øu c·∫ßn)
                    throw new RuntimeException("Job failed: " + json.optString("error_message", "Unknown error") + ". Body: " + responseBody);
                }
            }
        }

        throw new RuntimeException("‚è≥ Timeout after " + (MAX_POLLING_ATTEMPTS * POLLING_INTERVAL_MS / 1000) + " seconds.");
    }
}
