package com.bkap.aispark.api;

import com.bkap.aispark.dto.ProfileDTO;
import com.bkap.aispark.entity.AiJournalismContest;
import com.bkap.aispark.entity.AiJournalismEntry;
import com.bkap.aispark.entity.AiJournalismRubric;
import com.bkap.aispark.security.JwtUtil;
import com.bkap.aispark.service.AiJournalismService;
import com.bkap.aispark.service.CreditService;
import com.bkap.aispark.service.ProfileService;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.theokanning.openai.service.OpenAiService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;
import java.util.*;

@RestController
@RequestMapping("/api/journalism")
public class AiJournalismContestApi {

	@Autowired
	private AiJournalismService service;

	@Autowired
	private ProfileService profileService;

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private CreditService creditService;

	@Autowired
	private OpenAiService openAiService;

	private final ObjectMapper objectMapper = new ObjectMapper();

	
	@GetMapping("/contests")
	public List<AiJournalismContest> getAllContests() {
		return service.getAllContests();
	}

	// chi tiet cuoc thi
	@GetMapping("/contests/{id}")
	public Map<String, Object> getContestDetail(@PathVariable Long id) {
		return Map.of("contest", service.getContest(id).orElse(null), "rubrics", service.getRubricsByContest(id));
	}

    // nop bai
	@PostMapping("/entries")
	public AiJournalismEntry submitEntry(@RequestBody AiJournalismEntry entry, HttpServletRequest request) {
		// L·∫•y userId t·ª´ token
		String authHeader = request.getHeader("Authorization");
		if (authHeader == null || !authHeader.startsWith("Bearer ")) {
			throw new RuntimeException("Thi·∫øu Authorization header");
		}
		Long userId = jwtUtil.getUserId(authHeader.substring(7));

		// L·∫•y profile ƒë·ªÉ bi·∫øt studentId
		ProfileDTO profile = profileService.getProfileByUserId(userId);

		// G√°n l·∫°i studentId ch√≠nh x√°c (n·∫øu l√† h·ªçc sinh)
		if (profile.getObjectType().toString().equals("STUDENT")) {
			entry.setStudentId(profile.getObjectId()); // üëà student.id
		} else {
			throw new RuntimeException("Ch·ªâ h·ªçc sinh m·ªõi ƒë∆∞·ª£c n·ªôp b√†i thi.");
		}

		entry.setStatus("SUBMITTED");
		return service.submitEntry(entry);
	}

	// bai thi cuoc thi
	@GetMapping("/entries/contest/{contestId}")
	public List<AiJournalismEntry> getEntriesByContest(@PathVariable Long contestId) {
		return service.getEntriesByContest(contestId);
	}

	// bai thi hoc sinh
	@GetMapping("/entries/student/{studentId}")
	public List<AiJournalismEntry> getEntriesByStudent(@PathVariable Long studentId) {
		return service.getEntriesByStudent(studentId);
	}

	// top 10
	@GetMapping("/contests/{contestId}/leaderboard")
	public List<Map<String, Object>> getLeaderboard(@PathVariable Long contestId) {
		List<AiJournalismEntry> entries = service.getLeaderboard(contestId);
		List<Map<String, Object>> result = new ArrayList<>();

		for (AiJournalismEntry e : entries) {
			String studentName = "·∫®n danh";
			String className = "";
			String role = "";

			// üîπ L·∫•y th√¥ng tin h·ªì s∆° qua ProfileService
			if (e.getStudentId() != null) {
				try {
					ProfileDTO profile = profileService.getProfileByStudentId(e.getStudentId());

					if (profile != null) {
						studentName = profile.getFullName() != null ? profile.getFullName() : "·∫®n danh";
						className = profile.getClassName() != null ? profile.getClassName() : "";
						role = profile.getRole() != null ? profile.getRole().toString() : "";
					}
				} catch (Exception ex) {

					studentName = "·∫®n danh";
				}
			}

			Map<String, Object> item = new HashMap<>();
			item.put("entryId", e.getId());
			item.put("studentId", e.getStudentId());
			item.put("studentName", studentName);
			item.put("className", className);
			item.put("role", role);
			item.put("title", e.getTitle());
			item.put("score", e.getAiScore());
			item.put("feedback", e.getAiFeedback());
			item.put("createdAt", e.getCreatedAt());

			result.add(item);
		}

		return result;
	}

    // cham bang AI
	@PostMapping("/entries/{id}/grade-ai")
	public Map<String, Object> gradeByOpenAi(@PathVariable Long id, HttpServletRequest request) {
	    try {
	        // üîπ L·∫•y b√†i d·ª± thi
	        AiJournalismEntry entry = service.getEntryById(id)
	                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†i d·ª± thi ID " + id));

	        // üîπ L·∫•y userId t·ª´ token
	        String authHeader = request.getHeader("Authorization");
	        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
	            throw new RuntimeException("Thi·∫øu Authorization header");
	        }
	        Long userId = jwtUtil.getUserId(authHeader.substring(7));

	        // üîπ L·∫•y rubric
	        List<AiJournalismRubric> rubrics = service.getRubricsByContest(entry.getContest().getId());

	        // üîπ T·∫°o prompt
	        String prompt = buildGradingPrompt(entry, rubrics);

	        // üîπ G·ªçi GPT
	        ChatCompletionRequest chatReq = ChatCompletionRequest.builder()
	                .model("gpt-4o-mini")
	                .messages(List.of(
	                        new ChatMessage("system", 
	                            "B·∫°n l√† gi√°m kh·∫£o chuy√™n nghi·ªáp, h√£y ch·∫•m b√†i vi·∫øt h·ªçc sinh d·ª±a tr√™n ti√™u ch√≠ v√† tr·∫£ JSON duy nh·∫•t."),
	                        new ChatMessage("user", prompt)))
	                .temperature(0.2)
	                .stream(false)
	                .build();

	        var result = openAiService.createChatCompletion(chatReq);
	        String raw = result.getChoices().get(0).getMessage().getContent();

	        // üîπ Parse JSON k·∫øt qu·∫£
	        Map<String, Object> json = objectMapper.readValue(raw, Map.class);

	        Double aiScore = ((Number) json.get("total_score")).doubleValue();
	        String feedback = (String) json.get("feedback");
	        Map<String, Object> criteriaScores = (Map<String, Object>) json.get("criteria");

	        // üîπ L∆∞u DB
	        entry.setAiScore(aiScore);
	        entry.setAiFeedback(feedback);
	        if (criteriaScores != null) {
	            entry.setAiCriteria(objectMapper.writeValueAsString(criteriaScores));
	        }
	        service.saveEntry(entry);

	        // üîπ Tr·ª´ credit theo token usage
	        int totalTokens = Optional.ofNullable(result.getUsage())
	                .map(u -> u.getTotalTokens()).map(Long::intValue).orElse(0);
	        creditService.deductByTokenUsage(userId, "AI_CONTEST", totalTokens, "entry-" + id);

	        // üîπ Tr·∫£ v·ªÅ ph·∫£n h·ªìi
	        return Map.of(
	                "status", "success",
	                "entryId", id,
	                "score", aiScore,
	                "criteria", criteriaScores,
	                "feedback", feedback,
	                "remainingCredit", creditService.getRemainingCredit(userId)
	        );

	    } catch (Exception e) {
	        e.printStackTrace();
	        return Map.of("status", "error", "message", e.getMessage());
	    }
	}


	// prompt cham diem
	private String buildGradingPrompt(AiJournalismEntry entry, List<AiJournalismRubric> rubrics) {
	    StringBuilder rubricText = new StringBuilder();
	    for (AiJournalismRubric r : rubrics) {
	        rubricText.append("- ").append(r.getCriterion())
	                .append(": ").append(r.getDescription())
	                .append(" (tr·ªçng s·ªë: ").append(r.getWeight()).append(")\n");
	    }

	    return String.join("\n",
	        "B·∫°n l√† gi√°m kh·∫£o c·ªßa cu·ªôc thi 'AI Nh√† B√°o Nh√≠'.",
	        "H√£y ƒë·ªçc k·ªπ b√†i vi·∫øt v√† ch·∫•m ƒëi·ªÉm d·ª±a tr√™n c√°c ti√™u ch√≠ sau:",
	        rubricText.toString(),
	        "",
	        "B√†i vi·∫øt:",
	        "Ti√™u ƒë·ªÅ: " + entry.getTitle(),
	        "N·ªôi dung:\n" + entry.getArticle(),
	        "",
	        "Y√™u c·∫ßu:",
	        "1. Cho ƒëi·ªÉm t·ª´ng ti√™u ch√≠ tr√™n thang 0-25 (ho·∫∑c theo tr·ªçng s·ªë t∆∞∆°ng ·ª©ng).",
	        "2. T√≠nh t·ªïng ƒëi·ªÉm tr√™n thang 100, c√≥ th·ªÉ l√†m tr√≤n.",
	        "3. Vi·∫øt nh·∫≠n x√©t t·ªïng quan ng·∫Øn g·ªçn, mang t√≠nh kh√≠ch l·ªá v√† g√≥p √Ω c·∫£i thi·ªán.",
	        "",
	        "Tr·∫£ k·∫øt qu·∫£ DUY NH·∫§T theo ƒë√∫ng ƒë·ªãnh d·∫°ng JSON sau (kh√¥ng th√™m vƒÉn b·∫£n n√†o kh√°c):",
	        "{",
	        "  \"total_score\": <t·ªïng ƒëi·ªÉm tr√™n 100>,",
	        "  \"criteria\": {",
	        "    \"N·ªôi dung\": <ƒëi·ªÉm>,",
	        "    \"C·∫£m x√∫c\": <ƒëi·ªÉm>,",
	        "    \"S√°ng t·∫°o\": <ƒëi·ªÉm>,",
	        "    \"Tr√¨nh b√†y\": <ƒëi·ªÉm>",
	        "  },",
	        "  \"feedback\": \"nh·∫≠n x√©t t·ªïng quan v√† g√≥p √Ω c·∫£i thi·ªán\"",
	        "}"
	    );
	}

}
