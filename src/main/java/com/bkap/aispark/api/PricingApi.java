package com.bkap.aispark.api;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bkap.aispark.entity.Pricing;
import com.bkap.aispark.repository.PricingRepository;
import com.bkap.aispark.service.PricingService;

@RestController
@RequestMapping("/api/pricing")
public class PricingApi {

    @Autowired
    private PricingService pricingService;

    @Autowired
    private PricingRepository pricingRepository;

    @GetMapping
    public ResponseEntity<List<Pricing>> getAllPricing() {
        return ResponseEntity.ok(pricingService.getAllPricing());
    }

    // ðŸ”¹ ThÃªm má»›i Pricing
    @PostMapping
    public Pricing createPricing(@RequestBody Pricing pricing) {
        if (pricingRepository.existsByActionCode(pricing.getActionCode())) {
            throw new IllegalArgumentException("MÃ£ thao tÃ¡c Ä‘Ã£ tá»“n táº¡i!");
        }
        System.out.println("DEBUG => Class: " + pricing.getClass().getName());
        System.out.println("DEBUG => ActionCode: " + pricing.getActionCode());
        System.out.println("DEBUG => ActionName: " + pricing.getActionName());

        if (pricing.getActionName() == null || pricing.getActionName().trim().isEmpty()) {
            throw new IllegalArgumentException("TÃªn thao tÃ¡c khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng!");
        }

        return pricingRepository.save(pricing);
    }

    // ðŸ”¹ XÃ³a Pricing
    @DeleteMapping("/{id}")
    public void deletePricing(@PathVariable Integer id) {
        Optional<Pricing> optional = pricingRepository.findById(id);
        if (optional.isEmpty()) {
            throw new IllegalArgumentException("KhÃ´ng tÃ¬m tháº¥y pricing vá»›i id = " + id);
        }

        Pricing pricing = optional.get();

        // Náº¿u pricing cÃ³ version liÃªn káº¿t, báº¡n cÃ³ thá»ƒ xá»­ lÃ½ logic riÃªng á»Ÿ Ä‘Ã¢y
        // (VD: khÃ´ng cho xÃ³a náº¿u cÃ³ version Ä‘ang active)
        pricingRepository.delete(pricing);
    }

}
